{
"version":3,
"file":"goog.net.cookies.js",
"lineCount":161,
"mappings":"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",
"sources":["goog/net/cookies.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Functions for setting, getting and deleting cookies.\n */\n\n\ngoog.provide('goog.net.Cookies');\n\ngoog.require('goog.string');\n\n\n\n/**\n * A class for handling browser cookies.\n * @param {?Document} context The context document to get/set cookies on.\n * @constructor\n * @final\n */\ngoog.net.Cookies = function(context) {\n  'use strict';\n  /**\n   * The context document to get/set cookies on. If no document context is\n   * passed, use a fake one with only the \"cookie\" attribute. This allows\n   * this class to be instantiated safely in web worker environments.\n   * @private {{cookie: string}}\n   */\n  this.document_ = context || {cookie: ''};\n};\n\n\n/**\n * Static constant for the size of cookies. Per the spec, there's a 4K limit\n * to the size of a cookie. To make sure users can't break this limit, we\n * should truncate long cookies at 3950 bytes, to be extra careful with dumb\n * browsers/proxies that interpret 4K as 4000 rather than 4096.\n * @const {number}\n */\ngoog.net.Cookies.MAX_COOKIE_LENGTH = 3950;\n\n\n/**\n * The name of the test cookie to set.\n *\n *\n * @private @const {string}\n */\ngoog.net.Cookies.TEST_COOKIE_NAME_ = 'TESTCOOKIESENABLED';\n\n\n/**\n * The value of the test cookie to set.\n * @private @const {string}\n */\ngoog.net.Cookies.TEST_COOKIE_VALUE_ = '1';\n\n\n/**\n * Max age of the test cookie in seconds.\n * @private @const {number}\n */\ngoog.net.Cookies.TEST_COOKIE_MAX_AGE_ = 60;\n\n\n/**\n * Returns true if cookies are enabled.\n *\n * navigator.cookieEnabled is an unreliable API in some browsers such as\n * Internet Explorer. It will return true even when cookies are actually\n * blocked. To work around this, check for the presence of cookies, or attempt\n * to manually set and retrieve a cookie, which is the ultimate test of whether\n * or not a browser supports cookies.\n *\n * @return {boolean} True if cookies are enabled.\n */\ngoog.net.Cookies.prototype.isEnabled = function() {\n  'use strict';\n  if (!goog.global.navigator.cookieEnabled) {\n    return false;\n  }\n\n  if (!this.isEmpty()) {\n    // There are some cookies already set for the current domain, so cookies\n    // can't be totally blocked.\n    return true;\n  }\n\n  // Try setting and reading back a cookie to see if cookies are enabled.\n  this.set(\n      goog.net.Cookies.TEST_COOKIE_NAME_, goog.net.Cookies.TEST_COOKIE_VALUE_,\n      {maxAge: goog.net.Cookies.TEST_COOKIE_MAX_AGE_});\n  if (this.get(goog.net.Cookies.TEST_COOKIE_NAME_) !==\n      goog.net.Cookies.TEST_COOKIE_VALUE_) {\n    return false;\n  }\n\n  // Clean up the test cookie.\n  this.remove(goog.net.Cookies.TEST_COOKIE_NAME_);\n\n  return true;\n};\n\n\n/**\n * We do not allow '=', ';', or white space in the name.\n *\n * NOTE: The following are allowed by this method, but should be avoided for\n * cookies handled by the server.\n * - any name starting with '$'\n * - 'Comment'\n * - 'Domain'\n * - 'Expires'\n * - 'Max-Age'\n * - 'Path'\n * - 'Secure'\n * - 'Version'\n *\n * @param {string} name Cookie name.\n * @return {boolean} Whether name is valid.\n *\n * @see <a href=\"http://tools.ietf.org/html/rfc2109\">RFC 2109</a>\n * @see <a href=\"http://tools.ietf.org/html/rfc2965\">RFC 2965</a>\n */\ngoog.net.Cookies.prototype.isValidName = function(name) {\n  'use strict';\n  return !(/[;=\\s]/.test(name));\n};\n\n\n/**\n * We do not allow ';' or line break in the value.\n *\n * Spec does not mention any illegal characters, but in practice semi-colons\n * break parsing and line breaks truncate the name.\n *\n * @param {string} value Cookie value.\n * @return {boolean} Whether value is valid.\n *\n * @see <a href=\"http://tools.ietf.org/html/rfc2109\">RFC 2109</a>\n * @see <a href=\"http://tools.ietf.org/html/rfc2965\">RFC 2965</a>\n */\ngoog.net.Cookies.prototype.isValidValue = function(value) {\n  'use strict';\n  return !(/[;\\r\\n]/.test(value));\n};\n\n\n/**\n * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and\n * expire cookies, use remove() instead.\n *\n * Neither the `name` nor the `value` are encoded in any way. It is\n * up to the callers of `get` and `set` (as well as all the other\n * methods) to handle any possible encoding and decoding.\n *\n * @throws {!Error} If the `name` fails #goog.net.cookies.isValidName.\n * @throws {!Error} If the `value` fails #goog.net.cookies.isValidValue.\n *\n * @param {string} name  The cookie name.\n * @param {string} value  The cookie value.\n * @param {!goog.net.Cookies.SetOptions=} options  The options object.\n */\ngoog.net.Cookies.prototype.set = function(name, value, options) {\n  'use strict';\n  /** @type {number|undefined} */\n  let maxAge;\n  /** @type {string|undefined} */\n  let path;\n  /** @type {string|undefined} */\n  let domain;\n  /** @type {boolean} */\n  let secure = false;\n  /** @type {!goog.net.Cookies.SameSite|undefined} */\n  let sameSite;\n\n  if (typeof options === 'object') {\n    sameSite = options.sameSite;\n    secure = options.secure || false;\n    domain = options.domain || undefined;\n    path = options.path || undefined;\n    maxAge = options.maxAge;\n  }\n  if (!this.isValidName(name)) {\n    throw new Error('Invalid cookie name \"' + name + '\"');\n  }\n  if (!this.isValidValue(value)) {\n    throw new Error('Invalid cookie value \"' + value + '\"');\n  }\n\n  if (maxAge === undefined) {\n    maxAge = -1;\n  }\n\n  const domainStr = domain ? ';domain=' + domain : '';\n  const pathStr = path ? ';path=' + path : '';\n  const secureStr = secure ? ';secure' : '';\n\n  let expiresStr;\n\n  // Case 1: Set a session cookie.\n  if (maxAge < 0) {\n    expiresStr = '';\n\n    // Case 2: Remove the cookie.\n    // Note: We don't tell people about this option in the function doc because\n    // we prefer people to use remove() to remove cookies.\n  } else if (maxAge == 0) {\n    // Note: Don't use Jan 1, 1970 for date because NS 4.76 will try to convert\n    // it to local time, and if the local time is before Jan 1, 1970, then the\n    // browser will ignore the Expires attribute altogether.\n    const pastDate = new Date(1970, 1 /*Feb*/, 1);  // Feb 1, 1970\n    expiresStr = ';expires=' + pastDate.toUTCString();\n\n    // Case 3: Set a persistent cookie.\n  } else {\n    const futureDate = new Date(Date.now() + maxAge * 1000);\n    expiresStr = ';expires=' + futureDate.toUTCString();\n  }\n\n  const sameSiteStr = sameSite != null ? ';samesite=' + sameSite : '';\n\n  this.setCookie_(\n      name + '=' + value + domainStr + pathStr + expiresStr + secureStr +\n      sameSiteStr);\n};\n\n\n/**\n * Returns the value for the first cookie with the given name.\n * @param {string} name  The name of the cookie to get.\n * @param {string=} opt_default  If not found this is returned instead.\n * @return {string|undefined}  The value of the cookie. If no cookie is set this\n *     returns opt_default or undefined if opt_default is not provided.\n */\ngoog.net.Cookies.prototype.get = function(name, opt_default) {\n  'use strict';\n  const nameEq = name + '=';\n  const parts = this.getParts_();\n  for (let i = 0, part; i < parts.length; i++) {\n    part = goog.string.trim(parts[i]);\n    // startsWith\n    if (part.lastIndexOf(nameEq, 0) == 0) {\n      return part.substr(nameEq.length);\n    }\n    if (part == name) {\n      return '';\n    }\n  }\n  return opt_default;\n};\n\n\n/**\n * Removes and expires a cookie.\n * @param {string} name  The cookie name.\n * @param {?string=} opt_path  The path of the cookie. If null or not present,\n *     expires the cookie set at the full request path.\n * @param {?string=} opt_domain  The domain of the cookie, or null to expire a\n *     cookie set at the full request host name. If not provided, the default is\n *     null (i.e. cookie at full request host name).\n * @return {boolean} Whether the cookie existed before it was removed.\n */\ngoog.net.Cookies.prototype.remove = function(name, opt_path, opt_domain) {\n  'use strict';\n  const rv = this.containsKey(name);\n  this.set(name, '', {maxAge: 0, path: opt_path, domain: opt_domain});\n  return rv;\n};\n\n\n/**\n * Gets the names for all the cookies.\n * @return {!Array<string>} An array with the names of the cookies.\n */\ngoog.net.Cookies.prototype.getKeys = function() {\n  'use strict';\n  return this.getKeyValues_().keys;\n};\n\n\n/**\n * Gets the values for all the cookies.\n * @return {!Array<string>} An array with the values of the cookies.\n */\ngoog.net.Cookies.prototype.getValues = function() {\n  'use strict';\n  return this.getKeyValues_().values;\n};\n\n\n/**\n * @return {boolean} Whether there are any cookies for this document.\n */\ngoog.net.Cookies.prototype.isEmpty = function() {\n  'use strict';\n  return !this.getCookie_();\n};\n\n\n/**\n * @return {number} The number of cookies for this document.\n */\ngoog.net.Cookies.prototype.getCount = function() {\n  'use strict';\n  const cookie = this.getCookie_();\n  if (!cookie) {\n    return 0;\n  }\n  return this.getParts_().length;\n};\n\n\n/**\n * Returns whether there is a cookie with the given name.\n * @param {string} key The name of the cookie to test for.\n * @return {boolean} Whether there is a cookie by that name.\n */\ngoog.net.Cookies.prototype.containsKey = function(key) {\n  'use strict';\n  // substring will return empty string if the key is not found, so the get\n  // function will only return undefined\n  return this.get(key) !== undefined;\n};\n\n\n/**\n * Returns whether there is a cookie with the given value. (This is an O(n)\n * operation.)\n * @param {string} value  The value to check for.\n * @return {boolean} Whether there is a cookie with that value.\n */\ngoog.net.Cookies.prototype.containsValue = function(value) {\n  'use strict';\n  // this O(n) in any case so lets do the trivial thing.\n  const values = this.getKeyValues_().values;\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] == value) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Removes all cookies for this document.  Note that this will only remove\n * cookies from the current path and domain.  If there are cookies set using a\n * subpath and/or another domain these will still be there.\n */\ngoog.net.Cookies.prototype.clear = function() {\n  'use strict';\n  const keys = this.getKeyValues_().keys;\n  for (let i = keys.length - 1; i >= 0; i--) {\n    this.remove(keys[i]);\n  }\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser.\n * @param {string} s The cookie string to set.\n * @private\n */\ngoog.net.Cookies.prototype.setCookie_ = function(s) {\n  'use strict';\n  this.document_.cookie = s;\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser. IE6 can return null here.\n * @return {string} Returns the `document.cookie`.\n * @private\n */\ngoog.net.Cookies.prototype.getCookie_ = function() {\n  'use strict';\n  return this.document_.cookie;\n};\n\n\n/**\n * @return {!Array<string>} The cookie split on semi colons.\n * @private\n */\ngoog.net.Cookies.prototype.getParts_ = function() {\n  'use strict';\n  return (this.getCookie_() || '').split(';');\n};\n\n\n/**\n * Gets the names and values for all the cookies.\n * @return {{keys:!Array<string>, values:!Array<string>}} An object with keys\n *     and values.\n * @private\n */\ngoog.net.Cookies.prototype.getKeyValues_ = function() {\n  'use strict';\n  const parts = this.getParts_();\n  const keys = [];\n  const values = [];\n  let index;\n  let part;\n  for (let i = 0; i < parts.length; i++) {\n    part = goog.string.trim(parts[i]);\n    index = part.indexOf('=');\n\n    if (index == -1) {  // empty name\n      keys.push('');\n      values.push(part);\n    } else {\n      keys.push(part.substring(0, index));\n      values.push(part.substring(index + 1));\n    }\n  }\n  return {keys: keys, values: values};\n};\n\n\n/**\n * Options object for calls to Cookies.prototype.set.\n * @record\n */\ngoog.net.Cookies.SetOptions = function() {\n  'use strict';\n  /**\n   * The max age in seconds (from now). Use -1 to set a session cookie. If not\n   * provided, the default is -1 (i.e. set a session cookie).\n   * @type {number|undefined}\n   */\n  this.maxAge;\n  /**\n   * The path of the cookie. If not present then this uses the full request\n   * path.\n   * @type {?string|undefined}\n   */\n  this.path;\n  /**\n   * The domain of the cookie, or null to not specify a domain attribute\n   * (browser will use the full request host name). If not provided, the default\n   * is null (i.e. let browser use full request host name).\n   * @type {?string|undefined}\n   */\n  this.domain;\n  /**\n   * Whether the cookie should only be sent over a secure channel.\n   * @type {boolean|undefined}\n   */\n  this.secure;\n  /**\n   * The SameSite attribute for the cookie (default is NONE).\n   * @type {!goog.net.Cookies.SameSite|undefined}\n   */\n  this.sameSite;\n};\n\n\n/**\n * Valid values for the SameSite cookie attribute.  In 2019, browsers began the\n * process of changing the default from NONE to LAX.\n *\n * @see https://web.dev/samesite-cookies-explained\n * @see https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7\n * @enum {string}\n */\ngoog.net.Cookies.SameSite = {\n  /**\n   * The cookie will be sent in first-party contexts, including initial\n   * navigation from external referrers.\n   */\n  LAX: 'lax',\n  /**\n   * The cookie will be sent in all first-party or third-party contexts. This\n   * was the original default behavior of the web, but will need to be set\n   * explicitly starting in 2020.\n   */\n  NONE: 'none',\n  /**\n   * The cookie will only be sent in first-party contexts. It will not be sent\n   * on initial navigation from external referrers.\n   */\n  STRICT: 'strict',\n};\n\n/**\n * A static default instance.\n * @const {!goog.net.Cookies}\n * @private\n */\ngoog.net.Cookies.instance_ =\n    new goog.net.Cookies(typeof document == 'undefined' ? null : document);\n\n/**\n * Getter for the static instance of goog.net.Cookies.\n * @return {!goog.net.Cookies}\n */\ngoog.net.Cookies.getInstance = function() {\n  'use strict';\n  return goog.net.Cookies.instance_;\n};\n"],
"names":["goog","provide","require","net","Cookies","goog.net.Cookies","context","document_","cookie","MAX_COOKIE_LENGTH","TEST_COOKIE_NAME_","TEST_COOKIE_VALUE_","TEST_COOKIE_MAX_AGE_","prototype","isEnabled","goog.net.Cookies.prototype.isEnabled","global","navigator","cookieEnabled","isEmpty","set","maxAge","get","remove","isValidName","goog.net.Cookies.prototype.isValidName","name","test","isValidValue","goog.net.Cookies.prototype.isValidValue","value","goog.net.Cookies.prototype.set","options","path","domain","secure","sameSite","undefined","Error","domainStr","pathStr","secureStr","expiresStr","pastDate","Date","toUTCString","futureDate","now","sameSiteStr","setCookie_","goog.net.Cookies.prototype.get","opt_default","nameEq","parts","getParts_","i","part","length","string","trim","lastIndexOf","substr","goog.net.Cookies.prototype.remove","opt_path","opt_domain","rv","containsKey","getKeys","goog.net.Cookies.prototype.getKeys","getKeyValues_","keys","getValues","goog.net.Cookies.prototype.getValues","values","goog.net.Cookies.prototype.isEmpty","getCookie_","getCount","goog.net.Cookies.prototype.getCount","goog.net.Cookies.prototype.containsKey","key","containsValue","goog.net.Cookies.prototype.containsValue","clear","goog.net.Cookies.prototype.clear","goog.net.Cookies.prototype.setCookie_","s","goog.net.Cookies.prototype.getCookie_","goog.net.Cookies.prototype.getParts_","split","goog.net.Cookies.prototype.getKeyValues_","index","indexOf","push","substring","SetOptions","goog.net.Cookies.SetOptions","SameSite","LAX","NONE","STRICT","instance_","document","getInstance","goog.net.Cookies.getInstance"]
}
